import sys
from PyQt5 import QtWidgets
from vista.vista4 import Ui_MainWindow
from controlador.controlador_vista import ControladorVista

def main():
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)

    # cargaremos los estilos desde archivo externo
    try:
        with open("assets/styles.qss", "r", encoding="utf-8") as f:
            app.setStyleSheet(f.read())
    except Exception as e:
        print(f"No se pudo cargar el archivo de estilos: {e}")

    
    controlador = ControladorVista(ui)

    MainWindow.show()
    sys.exit(app.exec_())

if __name__ == "__main__":
    main()












# # -*- coding: utf-8 -*-
# import sys
# from PyQt5 import QtWidgets
# from vista.vista4 import Ui_MainWindow  # tu archivo generado por pyuic5


# def cargar_estilos(ruta):
#     """Carga un archivo QSS y devuelve su contenido"""
#     try:
#         with open(ruta, "r", encoding="utf-8") as f:
#             return f.read()
#     except FileNotFoundError:
#         print(f"Archivo de estilos no encontrado: {ruta}")
#         return ""


# def main():
#     app = QtWidgets.QApplication(sys.argv)
#     MainWindow = QtWidgets.QMainWindow()
#     ui = Ui_MainWindow()
#     ui.setupUi(MainWindow)

#     # Cargar estilos desde archivo externo
#     qss = cargar_estilos("assets/styles.qss")
#     app.setStyleSheet(qss)

#     MainWindow.show()
#     sys.exit(app.exec_())


# if __name__ == "__main__":
#     main()



# from controlador.download_controller import DownloadController
# from vista.download_view import DownloadView
# from modelo.download_model import DownloadModel


# def main():
#     model = DownloadModel()
#     view = DownloadView()
#     controller = DownloadController(model, view)

#     view.run()  # Arranca la aplicación

# if __name__ == "__main__":
#     main()










































# # main.py
# from controller import YouTubeController
# from view import YouTubeView
# from model import YouTubeModel

# def main():
#     # Crear modelo, vista y controlador
#     model = YouTubeModel()
#     view = YouTubeView()
#     controller = YouTubeController(model, view)
    
#     # Arrancar la aplicación
#     view.run()

# if __name__ == "__main__":
#     main()




# # main.py
# from Controlador import dowload_controller
# from Vista import dowload_view
# from Modelo import dowload_model

# def main():
#     # Crear modelo, vista y controlador
#     model = dowload_model()
#     view = dowload_view()
#     controller = dowload_controller(model, view)
    
#     # Arrancar la aplicación
#     view.run()

# if __name__ == "__main__":
#     main()








# import sys
# from PyQt5.QtWidgets import QApplication, QLabel, QWidget, QVBoxLayout  # Corrección: QApplication y QVBoxLayout

# def main():
#     app = QApplication(sys.argv)  # Corrección: QApplication (con doble 'p')
#     ventana = QWidget()
#     ventana.setWindowTitle("Mi primera app con PyQt5")  # Corrección de texto
#     ventana.setGeometry(100, 100, 400, 200)

#     layout = QVBoxLayout()  # Corrección: QVBoxLayout (no QBoxLayout)
#     label = QLabel("Hola desde PyQt5")
#     layout.addWidget(label)  # Corrección: addWidget (no addWiget)

#     ventana.setLayout(layout)
#     ventana.show()

#     sys.exit(app.exec_())

# if __name__ == "__main__":  # Corrección: debe ser doble igual (==) y comillas dobles o simples
#     main()






# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'ui/vista4.ui'
#
# Created by: PyQt5 UI code generator 5.15.11
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(600, 400)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.verticalLayout_central = QtWidgets.QVBoxLayout(self.centralwidget)
        self.verticalLayout_central.setObjectName("verticalLayout_central")
        self.tabWidget = QtWidgets.QTabWidget(self.centralwidget)
        self.tabWidget.setObjectName("tabWidget")
        self.tab_un_video = QtWidgets.QWidget()
        self.tab_un_video.setObjectName("tab_un_video")
        self.verticalLayout_tab1 = QtWidgets.QVBoxLayout(self.tab_un_video)
        self.verticalLayout_tab1.setObjectName("verticalLayout_tab1")
        self.lbl_img_video = QtWidgets.QLabel(self.tab_un_video)
        self.lbl_img_video.setText("")
        self.lbl_img_video.setPixmap(QtGui.QPixmap("ui\\../assets/images/video.jpg"))
        self.lbl_img_video.setScaledContents(False)
        self.lbl_img_video.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_img_video.setObjectName("lbl_img_video")
        self.verticalLayout_tab1.addWidget(self.lbl_img_video)
        self.lbl_desc_video = QtWidgets.QLabel(self.tab_un_video)
        self.lbl_desc_video.setObjectName("lbl_desc_video")
        self.verticalLayout_tab1.addWidget(self.lbl_desc_video)
        self.lbl_url_video = QtWidgets.QLabel(self.tab_un_video)
        self.lbl_url_video.setObjectName("lbl_url_video")
        self.verticalLayout_tab1.addWidget(self.lbl_url_video)
        self.txt_url_video = QtWidgets.QLineEdit(self.tab_un_video)
        self.txt_url_video.setObjectName("txt_url_video")
        self.verticalLayout_tab1.addWidget(self.txt_url_video)
        self.horizontalLayout_tab1_path = QtWidgets.QHBoxLayout()
        self.horizontalLayout_tab1_path.setObjectName("horizontalLayout_tab1_path")
        self.lbl_guardar_video = QtWidgets.QLabel(self.tab_un_video)
        self.lbl_guardar_video.setObjectName("lbl_guardar_video")
        self.horizontalLayout_tab1_path.addWidget(self.lbl_guardar_video)
        self.btn_ruta_video = QtWidgets.QPushButton(self.tab_un_video)
        self.btn_ruta_video.setObjectName("btn_ruta_video")
        self.horizontalLayout_tab1_path.addWidget(self.btn_ruta_video)
        self.verticalLayout_tab1.addLayout(self.horizontalLayout_tab1_path)
        self.btn_descargar_video = QtWidgets.QPushButton(self.tab_un_video)
        self.btn_descargar_video.setObjectName("btn_descargar_video")
        self.verticalLayout_tab1.addWidget(self.btn_descargar_video)
        self.progress_video = QtWidgets.QProgressBar(self.tab_un_video)
        self.progress_video.setProperty("value", 0)
        self.progress_video.setObjectName("progress_video")
        self.verticalLayout_tab1.addWidget(self.progress_video)
        self.btn_abrir_video = QtWidgets.QPushButton(self.tab_un_video)
        self.btn_abrir_video.setEnabled(False)
        self.btn_abrir_video.setObjectName("btn_abrir_video")
        self.verticalLayout_tab1.addWidget(self.btn_abrir_video)
        self.tabWidget.addTab(self.tab_un_video, "")
        self.tab_varios_videos = QtWidgets.QWidget()
        self.tab_varios_videos.setObjectName("tab_varios_videos")
        self.verticalLayout_tab2 = QtWidgets.QVBoxLayout(self.tab_varios_videos)
        self.verticalLayout_tab2.setObjectName("verticalLayout_tab2")
        self.frame_img_varios = QtWidgets.QFrame(self.tab_varios_videos)
        self.frame_img_varios.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frame_img_varios.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frame_img_varios.setObjectName("frame_img_varios")
        self.layout_frame_varios = QtWidgets.QVBoxLayout(self.frame_img_varios)
        self.layout_frame_varios.setObjectName("layout_frame_varios")
        self.lbl_img_varios = QtWidgets.QLabel(self.frame_img_varios)
        self.lbl_img_varios.setText("")
        self.lbl_img_varios.setPixmap(QtGui.QPixmap("ui\\../assets/images/videos.jpg"))
        self.lbl_img_varios.setScaledContents(False)
        self.lbl_img_varios.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_img_varios.setObjectName("lbl_img_varios")
        self.layout_frame_varios.addWidget(self.lbl_img_varios)
        self.verticalLayout_tab2.addWidget(self.frame_img_varios)
        self.lbl_doc = QtWidgets.QLabel(self.tab_varios_videos)
        self.lbl_doc.setObjectName("lbl_doc")
        self.verticalLayout_tab2.addWidget(self.lbl_doc)
        self.btn_doc = QtWidgets.QPushButton(self.tab_varios_videos)
        self.btn_doc.setObjectName("btn_doc")
        self.verticalLayout_tab2.addWidget(self.btn_doc)
        self.horizontalLayout_tab2_path = QtWidgets.QHBoxLayout()
        self.horizontalLayout_tab2_path.setObjectName("horizontalLayout_tab2_path")
        self.lbl_guardar_varios = QtWidgets.QLabel(self.tab_varios_videos)
        self.lbl_guardar_varios.setObjectName("lbl_guardar_varios")
        self.horizontalLayout_tab2_path.addWidget(self.lbl_guardar_varios)
        self.btn_ruta_varios = QtWidgets.QPushButton(self.tab_varios_videos)
        self.btn_ruta_varios.setObjectName("btn_ruta_varios")
        self.horizontalLayout_tab2_path.addWidget(self.btn_ruta_varios)
        self.verticalLayout_tab2.addLayout(self.horizontalLayout_tab2_path)
        self.btn_descargar_varios = QtWidgets.QPushButton(self.tab_varios_videos)
        self.btn_descargar_varios.setObjectName("btn_descargar_varios")
        self.verticalLayout_tab2.addWidget(self.btn_descargar_varios)
        self.progress_variosVideos = QtWidgets.QProgressBar(self.tab_varios_videos)
        self.progress_variosVideos.setProperty("value", 0)
        self.progress_variosVideos.setObjectName("progress_variosVideos")
        self.verticalLayout_tab2.addWidget(self.progress_variosVideos)
        self.btn_abrir_varios = QtWidgets.QPushButton(self.tab_varios_videos)
        self.btn_abrir_varios.setEnabled(False)
        self.btn_abrir_varios.setObjectName("btn_abrir_varios")
        self.verticalLayout_tab2.addWidget(self.btn_abrir_varios)
        self.tabWidget.addTab(self.tab_varios_videos, "")
        self.tab_playlist = QtWidgets.QWidget()
        self.tab_playlist.setObjectName("tab_playlist")
        self.verticalLayout_tab3 = QtWidgets.QVBoxLayout(self.tab_playlist)
        self.verticalLayout_tab3.setObjectName("verticalLayout_tab3")
        self.lbl_img_playlist = QtWidgets.QLabel(self.tab_playlist)
        self.lbl_img_playlist.setText("")
        self.lbl_img_playlist.setPixmap(QtGui.QPixmap("ui\\../assets/images/plylist.png"))
        self.lbl_img_playlist.setScaledContents(False)
        self.lbl_img_playlist.setAlignment(QtCore.Qt.AlignCenter)
        self.lbl_img_playlist.setObjectName("lbl_img_playlist")
        self.verticalLayout_tab3.addWidget(self.lbl_img_playlist)
        self.lbl_desc_playlist = QtWidgets.QLabel(self.tab_playlist)
        self.lbl_desc_playlist.setObjectName("lbl_desc_playlist")
        self.verticalLayout_tab3.addWidget(self.lbl_desc_playlist)
        self.lbl_url_playlist = QtWidgets.QLabel(self.tab_playlist)
        self.lbl_url_playlist.setObjectName("lbl_url_playlist")
        self.verticalLayout_tab3.addWidget(self.lbl_url_playlist)
        self.txt_url_playlist = QtWidgets.QLineEdit(self.tab_playlist)
        self.txt_url_playlist.setObjectName("txt_url_playlist")
        self.verticalLayout_tab3.addWidget(self.txt_url_playlist)
        self.horizontalLayout_tab3_path = QtWidgets.QHBoxLayout()
        self.horizontalLayout_tab3_path.setObjectName("horizontalLayout_tab3_path")
        self.lbl_guardar_playlist = QtWidgets.QLabel(self.tab_playlist)
        self.lbl_guardar_playlist.setObjectName("lbl_guardar_playlist")
        self.horizontalLayout_tab3_path.addWidget(self.lbl_guardar_playlist)
        self.btn_ruta_playlist = QtWidgets.QPushButton(self.tab_playlist)
        self.btn_ruta_playlist.setObjectName("btn_ruta_playlist")
        self.horizontalLayout_tab3_path.addWidget(self.btn_ruta_playlist)
        self.verticalLayout_tab3.addLayout(self.horizontalLayout_tab3_path)
        self.btn_descargar_playlist = QtWidgets.QPushButton(self.tab_playlist)
        self.btn_descargar_playlist.setObjectName("btn_descargar_playlist")
        self.verticalLayout_tab3.addWidget(self.btn_descargar_playlist)
        self.progress_playlist = QtWidgets.QProgressBar(self.tab_playlist)
        self.progress_playlist.setProperty("value", 0)
        self.progress_playlist.setObjectName("progress_playlist")
        self.verticalLayout_tab3.addWidget(self.progress_playlist)
        self.btn_abrir_playlist = QtWidgets.QPushButton(self.tab_playlist)
        self.btn_abrir_playlist.setEnabled(False)
        self.btn_abrir_playlist.setObjectName("btn_abrir_playlist")
        self.verticalLayout_tab3.addWidget(self.btn_abrir_playlist)
        self.tabWidget.addTab(self.tab_playlist, "")
        self.verticalLayout_central.addWidget(self.tabWidget)
        MainWindow.setCentralWidget(self.centralwidget)

        self.retranslateUi(MainWindow)
        self.tabWidget.setCurrentIndex(2)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Descargador YouTube"))
        self.lbl_desc_video.setText(_translate("MainWindow", "Descargar un video de YouTube"))
        self.lbl_url_video.setText(_translate("MainWindow", "URL Video"))
        self.lbl_guardar_video.setText(_translate("MainWindow", "Guardar en:"))
        self.btn_ruta_video.setText(_translate("MainWindow", "..."))
        self.btn_descargar_video.setText(_translate("MainWindow", "Descargar Video"))
        self.btn_abrir_video.setText(_translate("MainWindow", "Abrir"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_un_video), _translate("MainWindow", "Un video"))
        self.lbl_doc.setText(_translate("MainWindow", "Selecciona tu documento:"))
        self.btn_doc.setText(_translate("MainWindow", "..."))
        self.lbl_guardar_varios.setText(_translate("MainWindow", "Guardar en:"))
        self.btn_ruta_varios.setText(_translate("MainWindow", "..."))
        self.btn_descargar_varios.setText(_translate("MainWindow", "Descargar Videos"))
        self.btn_abrir_varios.setText(_translate("MainWindow", "Abrir videos"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_varios_videos), _translate("MainWindow", "Varios videos"))
        self.lbl_desc_playlist.setText(_translate("MainWindow", "Descargar lista de reproducción de YouTube"))
        self.lbl_url_playlist.setText(_translate("MainWindow", "URL Playlist"))
        self.lbl_guardar_playlist.setText(_translate("MainWindow", "Guardar en:"))
        self.btn_ruta_playlist.setText(_translate("MainWindow", "..."))
        self.btn_descargar_playlist.setText(_translate("MainWindow", "Descargar Playlist"))
        self.btn_abrir_playlist.setText(_translate("MainWindow", "Abrir videos"))
        self.tabWidget.setTabText(self.tabWidget.indexOf(self.tab_playlist), _translate("MainWindow", "Lista de reproducción"))



# -*- coding: utf-8 -*-
from pytubefix import YouTube, Playlist  # Ajusta import según pytubefix real
import os

class DescargarVideos:
    """Clase que implementa la lógica de descarga"""

    def __init__(self):
        pass

    def descargar_video(self, url, ruta_guardado, callback=None):
        """Descarga un solo video"""
        try:
            yt = YouTube(url)
            stream = yt.streams.get_highest_resolution()
            stream.download(output_path=ruta_guardado)
            if callback:
                callback(f"Video descargado: {yt.title}")
            return True
        except Exception as e:
            if callback:
                callback(f"Error: {e}")
            return False

    def descargar_playlist(self, url, ruta_guardado, callback=None):
        """Descarga todos los videos de una playlist"""
        try:
            pl = Playlist(url)
            for video in pl.videos:
                video.streams.get_highest_resolution().download(output_path=ruta_guardado)
                if callback:
                    callback(f"Descargando: {video.title}")
            if callback:
                callback("Playlist descargada correctamente")
            return True
        except Exception as e:
            if callback:
                callback(f"Error: {e}")
            return False

    def descargar_varios_videos(self, lista_urls, ruta_guardado, callback=None):
        """Descarga varios videos desde una lista de URLs"""
        for url in lista_urls:
            self.descargar_video(url, ruta_guardado, callback)




# -*- coding: utf-8 -*-
class LecturaVideos:
    """Clase para leer un archivo txt con URLs de videos"""

    def __init__(self, ruta_archivo):
        self.ruta_archivo = ruta_archivo

    def obtener_links(self):
        """Devuelve una lista de URLs del archivo"""
        try:
            with open(self.ruta_archivo, "r", encoding="utf-8") as f:
                lines = [line.strip() for line in f.readlines() if line.strip()]
                # Línea de depuración / confirmación
                print(f"Se leyeron {len(lines)} URL(s):")
                for url in lines:
                    print(f"   - {url}")
            return lines
        except Exception as e:
            print(f"Error al leer el archivo: {e}")
            return []

# -*- coding: utf-8 -*-
from PyQt5 import QtWidgets
from modelo.lectura_videos import LecturaVideos
from modelo.modelo_descargas import DescargarVideos

class ControladorVista:
    """Controlador que conecta la vista con el modelo"""

    def __init__(self, ui):
        self.ui = ui
        self.modelo = DescargarVideos()
        self.conectar_eventos()

    def conectar_eventos(self):
        # Botones "Guardar en..."
        self.ui.btn_ruta_video.clicked.connect(self.seleccionar_ruta_video)
        self.ui.btn_ruta_varios.clicked.connect(self.seleccionar_ruta_varios)
        self.ui.btn_ruta_playlist.clicked.connect(self.seleccionar_ruta_playlist)

        # Botón "Abrir documento" para varios videos
        self.ui.btn_doc.clicked.connect(self.abrir_documento_txt)

        # Botones descargar
        self.ui.btn_descargar_video.clicked.connect(self.descargar_un_video)
        self.ui.btn_descargar_varios.clicked.connect(self.descargar_varios_videos)
        self.ui.btn_descargar_playlist.clicked.connect(self.descargar_playlist)

    def seleccionar_ruta_video(self):
        ruta = QtWidgets.QFileDialog.getExistingDirectory(None, "Seleccionar carpeta para guardar video")
        if ruta:
            self.ui.lbl_guardar_video.setText(f"Guardar en: {ruta}")
            self.ruta_video = ruta

    def seleccionar_ruta_varios(self):
        ruta = QtWidgets.QFileDialog.getExistingDirectory(None, "Seleccionar carpeta para guardar varios videos")
        if ruta:
            self.ui.lbl_guardar_varios.setText(f"Guardar en: {ruta}")
            self.ruta_varios = ruta

    def seleccionar_ruta_playlist(self):
        ruta = QtWidgets.QFileDialog.getExistingDirectory(None, "Seleccionar carpeta para guardar playlist")
        if ruta:
            self.ui.lbl_guardar_playlist.setText(f"Guardar en: {ruta}")
            self.ruta_playlist = ruta

    def abrir_documento_txt(self):
        archivo, _ = QtWidgets.QFileDialog.getOpenFileName(None, "Seleccionar documento con URLs", "", "Archivos TXT (*.txt)")
        if archivo:
            self.ui.lbl_doc.setText(f"Archivo: {archivo}")
            self.archivo_varios = archivo

    def actualizar_status(self, mensaje):
        # Puedes actualizar un QLabel o StatusBar
        self.ui.status_varios.setText(mensaje)

    def descargar_un_video(self):
        url = self.ui.txt_url_video.text().strip()
        ruta = getattr(self, "ruta_video", None)
        if url and ruta:
            self.modelo.descargar_video(url, ruta, self.actualizar_status)

    def descargar_playlist(self):
        url = self.ui.txt_url_playlist.text().strip()
        ruta = getattr(self, "ruta_playlist", None)
        if url and ruta:
            self.modelo.descargar_playlist(url, ruta, self.actualizar_status)

    def descargar_varios_videos(self):
        ruta = getattr(self, "ruta_varios", None)
        archivo = getattr(self, "archivo_varios", None)
        if archivo and ruta:
            lectura = LecturaVideos(archivo)
            lista_urls = lectura.obtener_links()
            self.modelo.descargar_varios_videos(lista_urls, ruta, self.actualizar_status)

class DownloadController:
    def __init__(self, model, view):
        self.model = model
        self.view = view
        # Conectar el botón con la acción
        self.view.boton.clicked.connect(self.click_descargar)

    def click_descargar(self):
        url = self.view.input_url.text()
        self.model.descargar_video(url)

